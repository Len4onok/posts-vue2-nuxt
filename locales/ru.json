{
  "messages": {
    "alpha": "Поле {_field_} может содержать только буквенные символы",
    "alpha_num": "Поле {_field_} может содержать только буквенно-цифровые символы",
    "alpha_dash": "Поле {_field_} может содержать буквенно-цифровые символы, а также тире и знаки подчеркивания",
    "alpha_spaces": "Поле {_field_} может содержать только буквенные символы, а также пробелы",
    "between": "Поле {_field_} должно находиться между {min} и {max}",
    "confirmed": "Поле {_field_} подтверждения не совпадает",
    "digits": "Поле {_field_} должно быть числовым и точно содержать {length} цифр",
    "dimensions": "Поле {_field_} должно иметь размеры {width} пикселей на {height} пикселей",
    "email": "Поле {_field_} должно содержать действующий email",
    "excluded": "Поле {_field_} имеет недопустимое значение",
    "ext": "Поле {_field_} имеет недопустимый файл",
    "image": "Поле {_field_} должно содержать изображение",
    "integer": "Поле {_field_} должно быть целым числом",
    "length": "Поле {_field_} должно быть {length} длины",
    "max_value": "Поле {_field_} должно быть {max} или меньше",
    "max": "Поле {_field_} не может быть больше, чем {length} символов",
    "mimes": "Поле {_field_} должно иметь допустимый тип файла",
    "min_value": "Поле {_field_} должно иметь значение {min} или больше",
    "min": "Поле {_field_} должно быть не менее {length} символов",
    "numeric": "Поле {_field_} может содержать только числовые символы",
    "oneOf": "Поле {_field_} не является допустимым значением",
    "regex": "Формат поля {_field_} недействителен",
    "required_if": "Поле {_field_} является обязательным",
    "required": "Поле {_field_} обязательно",
    "size": "Размер поля {_field_} должен быть меньше {size}KB"
  },
  "task": {
    "title": "Задание",
    "description": "С помощью Vue 2 реализовать блог, в котором можно создавать/удалять посты. Пост состоит из названия (до 255 символов), текстового описания (4096 символов) и до 10 тегов. \n На главной странице отображается список всех постов с их тегами. Сверху кнопка - создать новый пост. При нажатии на неё - происходит переход на страницу, где обычная форма - название (input), описание (textarea), снизу кнопка \"Добавить еще один тег\" - появляется поле(input) для ввода названия тега, рядом кнопка \"Удалить тег\". \n Модель поста имеет структуру {id, name, description, tags: []}. Модель тега - {id, post_id, name}. Если массив tags пустой - значит у поста нет тегов. Когда добавляется новый тег, то к модели поста в массив tags добавляется новый тег, а при удалении - он удаляется из массива. Внизу формы кнопка сохранить - при нажатии - POST-запрос с данными на example.com/api/posts, далее происходит переход на главную. \n Для главной страницы можно создать json файл, состоящий из массива постов с тегами, наполнить фейковыми данными и подтягивать оттуда данные имитируя запрос к api через axios.get('posts.json') или же просто вставить json прямо в код vue.\nВозле каждого поста кнопка \"Удалить\" - DELETE запрос к example.com/api/posts/{post_id}, далее пост удаляется без перезагрузки страницы. Из json-файла пост можно не удалять.\n Дизайн не важен, хорошо если будет использоваться фреймворк ElementUI (https://element.eleme.io). Для запросов к api использовать axios, для локализации vue-i18n (достаточно одного русского языка)"
  },
  "title": "Посты",
  "button": {
    "addPost": "+ Создать новый пост",
    "save": "Сохранить",
    "addTag": "+ Новый тэг",
    "deletePost": "Удалить пост"
  },
  "placeholder": {
    "enterTitle": "Введите заголовок поста",
    "enterDescription": "Введите описание поста"
  },
  "label": {
    "title": "Заголовок",
    "description": "Описание"
  },
  "notification": {
    "error": "Ошибка",
    "default": "Что-то пошло не так, повторите позже"
  }
}
